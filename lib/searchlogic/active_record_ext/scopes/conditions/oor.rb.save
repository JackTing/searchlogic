module Searchlogic
  module ActiveRecordExt
    module Scopes
      module Conditions

        class Oor < Condition
          def scope
            if applicable?
              binding.pry
              method_without_ending_condition = method_name.to_s.split(ending_alias_condition).first
              methods = method_without_ending_condition.split("_or_")
              methods.map do |m| 
                binding.pry
                klass.send(add_condition(m), value) 
              end.flatten
            end
          end

          private
            def find_condition
              klass.joined_condition_klasses.split("|").find{ |jck| last_method.include?(jck)}
            end

            def add_condition(method)
              if column_name?(method) || association?(method)
                method + ending_alias_condition
              else
                method            
              end
            end

            def column_name?(method)
              !!(klass.column_names.find{|kcn| kcn.to_s == method.to_s})
            end

            def association?(method)
              !!(klass.reflect_on_all_associations.find{|ass| ass.name.to_s.downcase == method.to_s})
            end
            
            def ending_alias_condition 
              binding.pry
              /#{klass.sl_conditions}$/.match(method_name)[0]
            end
            def applicable? 
              return nil if /(find_or_create)/ =~ method_name 
              !(/(#{klass.column_names.join("|")})_or_/ =~ method_name).nil? 
            end
        end
      end
    end
  end
end


